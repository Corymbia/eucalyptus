---
# RDS DB Instance template for PostgreSQL
#
# Required:
#
# - Eucalyptus container image
# - Bucket name for container registry storage
# - Instance profile for bucket read
# - VPC and subnet for creating resources in
# - Volume for data
#
# Optional:
#
# - Postgres parameters
# - Instance type
# - SSH key name allowing debug connection to db instance
#
# PostgreSQL parameters as per RDS.
#
AWSTemplateFormatVersion: 2010-09-09
Description: PostgreSQL database instance template

Parameters:

  PostgresUser:
    Description: Postgres user
    Type: String
    Default: postgres

  PostgresPassword:
    Description: Postgres password
    Type: String
    Default: changeme

  PostgresDatabase:
    Description: Postgres database
    Type: String
    Default: postgres

  PostgresVersion:
    Description: Postgres version
    Type: String
    Default: 12

  PostgresPort:
    Description: Postgres listen port
    Type: String
    Default: 5432

  BucketName:
    Description: S3 bucket for container registry storage
    Type: String

  ImageId:
    Description: Identifier for the Eucalyptus Container image
    Type: String

  InstanceProfile:
    Description: Instance profile to use
    Type: String

  InstanceType:
    Description: Instance type to use
    Type: String
    Default: t2.small

  KeyName:
    Description: EC2 keypair for instance SSH access
    Type: String
    Default: ''

  SubnetId:
    Description:
    Type: String

  VolumeId:
    Description: The volume to use for database content
    Type: String

  VpcId:
    Description: The vpc to use
    Type: String

Conditions:
  
  UseKeyNameParameter: !Not
    - !Equals
      - !Ref KeyName
      - ''

Resources:

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Postgres security group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: !Ref PostgresPort
          ToPort: !Ref PostgresPort
          CidrIp: "0.0.0.0/0"

  Instance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !If
        - UseKeyNameParameter
        - !Ref 'KeyName'
        - !Ref 'AWS::NoValue'
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref SubnetId
          GroupSet:
            - !Ref SecurityGroup
      Volumes:
        - VolumeId: !Ref VolumeId
          Device: /dev/sdf
      UserData:
        Fn::Base64: !Sub |
          #cloud-config
          bootcmd:
          - test ! -z "$(blkid /dev/vdb)" || mkfs -t ext4 -L euca-rdsfs /dev/vdb
          - test -d /var/mnt/rds/data || mkdir -pv /var/mnt/rds/data
          mounts:
          - ["LABEL=euca-rdsfs", "/var/mnt/rds", "ext4", "defaults,nofail", "0", "2"]
          write_files:
          - path: /etc/containers/registries.conf
            permissions: "0644"
            owner: root
            content: |
              [[registry]]
              prefix = "docker.io"
              location = "127.0.0.1:5000"
              insecure = true
          - path: /etc/sysconfig/registry-container-bucket
            permissions: "0644"
            owner: root
            content: |
              REGISTRY_STORAGE_S3_BUCKET=${BucketName}
          - path: /usr/local/bin/registry-container-start
            permissions: "0755"
            owner: root
            content: |
              #!/bin/bash
              # Load registry image and start system registry service
              set -eux
              podman load docker.io/library/registry:2 < \
                  /usr/local/share/registry-container/registry.tar
              podman create --name registry \
                  --env-file /etc/sysconfig/registry-container \
                  --env-file /etc/sysconfig/registry-container-bucket \
                  --env-file /etc/sysconfig/registry-container-readonly \
                  --publish 127.0.0.1:5000:5000 \
                  docker.io/library/registry:2
              podman generate systemd --name --timeout 60 --restart-policy always registry > \
                  /etc/systemd/system/registry-container.service
              systemctl enable --now registry-container.service
          - path: /etc/sysconfig/postgres-container
            permissions: "0644"
            owner: root
            content: |
              POSTGRES_VERSION=${PostgresVersion}
              POSTGRES_DB=${PostgresDatabase}
              POSTGRES_PORT=${PostgresPort}
              POSTGRES_USER=${PostgresUser}
              POSTGRES_PASSWORD=${PostgresPassword}
          - path: /usr/local/bin/postgres-container-start
            permissions: "0755"
            owner: root
            content: |
              #!/bin/bash
              # Create postgres container and systemd service
              set -eux
              source /etc/sysconfig/postgres-container
              podman create --name postgres \
                  --env-file /etc/sysconfig/postgres-container \
                  --env PGDATA=/var/lib/postgres/rds/pgdata \
                  --env PGPORT=${!POSTGRES_PORT} \
                  --network host \
                  --volume /var/mnt/rds/data:/var/lib/postgres/rds:z \
                  docker.io/library/postgres:${!POSTGRES_VERSION}
              podman generate systemd --name --timeout 60 --restart-policy always postgres > \
                  /etc/systemd/system/postgres-container.service
              systemctl enable --now postgres-container.service
          runcmd:
          - /usr/local/bin/registry-container-start
          - /usr/local/bin/postgres-container-start

Outputs:

  InstanceId:
    Description: Postgres instance identifier
    Value: !Ref Instance
    
  PrivateIp:
    Description: Postgres instance private ip
    Value: !GetAtt Instance.PrivateIp
